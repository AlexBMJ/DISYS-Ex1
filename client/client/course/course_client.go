// Code generated by go-swagger; DO NOT EDIT.

package course

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new course API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for course API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddCourse(params *AddCourseParams, opts ...ClientOption) (*AddCourseOK, error)

	DeleteCourse(params *DeleteCourseParams, opts ...ClientOption) error

	GetCourseByID(params *GetCourseByIDParams, opts ...ClientOption) (*GetCourseByIDOK, error)

	GetOverview(params *GetOverviewParams, opts ...ClientOption) (*GetOverviewOK, error)

	UpdateCourse(params *UpdateCourseParams, opts ...ClientOption) (*UpdateCourseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddCourse adds a new course

  Course at ITU
*/
func (a *Client) AddCourse(params *AddCourseParams, opts ...ClientOption) (*AddCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCourse",
		Method:             "POST",
		PathPattern:        "/course",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddCourseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCourse deletes a course
*/
func (a *Client) DeleteCourse(params *DeleteCourseParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCourse",
		Method:             "DELETE",
		PathPattern:        "/course/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCourseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetCourseByID finds course by ID

  Returns a single course
*/
func (a *Client) GetCourseByID(params *GetCourseByIDParams, opts ...ClientOption) (*GetCourseByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCourseByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCourseById",
		Method:             "GET",
		PathPattern:        "/course/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCourseByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCourseByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCourseById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOverview returns list of courses available

  Returns a map of status codes to quantities
*/
func (a *Client) GetOverview(params *GetOverviewParams, opts ...ClientOption) (*GetOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverview",
		Method:             "GET",
		PathPattern:        "/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOverviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCourse updates a course
*/
func (a *Client) UpdateCourse(params *UpdateCourseParams, opts ...ClientOption) (*UpdateCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCourse",
		Method:             "PUT",
		PathPattern:        "/course/{courseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateCourseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
