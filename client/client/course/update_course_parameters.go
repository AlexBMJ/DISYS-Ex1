// Code generated by go-swagger; DO NOT EDIT.

package course

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"example.com/restclient/models"
)

// NewUpdateCourseParams creates a new UpdateCourseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateCourseParams() *UpdateCourseParams {
	return &UpdateCourseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCourseParamsWithTimeout creates a new UpdateCourseParams object
// with the ability to set a timeout on a request.
func NewUpdateCourseParamsWithTimeout(timeout time.Duration) *UpdateCourseParams {
	return &UpdateCourseParams{
		timeout: timeout,
	}
}

// NewUpdateCourseParamsWithContext creates a new UpdateCourseParams object
// with the ability to set a context for a request.
func NewUpdateCourseParamsWithContext(ctx context.Context) *UpdateCourseParams {
	return &UpdateCourseParams{
		Context: ctx,
	}
}

// NewUpdateCourseParamsWithHTTPClient creates a new UpdateCourseParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateCourseParamsWithHTTPClient(client *http.Client) *UpdateCourseParams {
	return &UpdateCourseParams{
		HTTPClient: client,
	}
}

/* UpdateCourseParams contains all the parameters to send to the API endpoint
   for the update course operation.

   Typically these are written to a http.Request.
*/
type UpdateCourseParams struct {

	/* Body.

	   Course to be updated
	*/
	Body *models.Course

	/* CourseID.

	   Id of course to delete

	   Format: int64
	*/
	CourseID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update course params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCourseParams) WithDefaults() *UpdateCourseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update course params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCourseParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update course params
func (o *UpdateCourseParams) WithTimeout(timeout time.Duration) *UpdateCourseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update course params
func (o *UpdateCourseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update course params
func (o *UpdateCourseParams) WithContext(ctx context.Context) *UpdateCourseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update course params
func (o *UpdateCourseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update course params
func (o *UpdateCourseParams) WithHTTPClient(client *http.Client) *UpdateCourseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update course params
func (o *UpdateCourseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update course params
func (o *UpdateCourseParams) WithBody(body *models.Course) *UpdateCourseParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update course params
func (o *UpdateCourseParams) SetBody(body *models.Course) {
	o.Body = body
}

// WithCourseID adds the courseID to the update course params
func (o *UpdateCourseParams) WithCourseID(courseID int64) *UpdateCourseParams {
	o.SetCourseID(courseID)
	return o
}

// SetCourseID adds the courseId to the update course params
func (o *UpdateCourseParams) SetCourseID(courseID int64) {
	o.CourseID = courseID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCourseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param courseId
	if err := r.SetPathParam("courseId", swag.FormatInt64(o.CourseID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
