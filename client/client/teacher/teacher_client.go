// Code generated by go-swagger; DO NOT EDIT.

package teacher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teacher API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teacher API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddTeacher(params *AddTeacherParams, opts ...ClientOption) (*AddTeacherOK, error)

	DeleteTeacher(params *DeleteTeacherParams, opts ...ClientOption) error

	FindTeacherByStatus(params *FindTeacherByStatusParams, opts ...ClientOption) (*FindTeacherByStatusOK, error)

	GetTeacherByID(params *GetTeacherByIDParams, opts ...ClientOption) (*GetTeacherByIDOK, error)

	UpdateTeacher(params *UpdateTeacherParams, opts ...ClientOption) (*UpdateTeacherOK, error)

	UploadTeacherPhoto(params *UploadTeacherPhotoParams, opts ...ClientOption) (*UploadTeacherPhotoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTeacher adds a new teacher

  Teacher at ITU
*/
func (a *Client) AddTeacher(params *AddTeacherParams, opts ...ClientOption) (*AddTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTeacher",
		Method:             "POST",
		PathPattern:        "/teacher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTeacher deletes a teacher
*/
func (a *Client) DeleteTeacher(params *DeleteTeacherParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTeacher",
		Method:             "DELETE",
		PathPattern:        "/teacher/{teacherId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  FindTeacherByStatus finds teacher by status

  Multiple status values can be provided with comma separated strings
*/
func (a *Client) FindTeacherByStatus(params *FindTeacherByStatusParams, opts ...ClientOption) (*FindTeacherByStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindTeacherByStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findTeacherByStatus",
		Method:             "GET",
		PathPattern:        "/teacher/findByStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FindTeacherByStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindTeacherByStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findTeacherByStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeacherByID finds teacher by ID

  Returns a single teacher
*/
func (a *Client) GetTeacherByID(params *GetTeacherByIDParams, opts ...ClientOption) (*GetTeacherByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeacherByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTeacherById",
		Method:             "GET",
		PathPattern:        "/teacher/{teacherId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTeacherByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeacherByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeacherById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTeacher updates a teacher
*/
func (a *Client) UpdateTeacher(params *UpdateTeacherParams, opts ...ClientOption) (*UpdateTeacherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeacherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTeacher",
		Method:             "PUT",
		PathPattern:        "/teacher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTeacherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeacherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTeacher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadTeacherPhoto uploads an image
*/
func (a *Client) UploadTeacherPhoto(params *UploadTeacherPhotoParams, opts ...ClientOption) (*UploadTeacherPhotoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadTeacherPhotoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadTeacherPhoto",
		Method:             "POST",
		PathPattern:        "/teacher/{teacherId}/uploadImage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadTeacherPhotoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadTeacherPhotoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadTeacherPhoto: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
