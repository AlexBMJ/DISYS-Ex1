// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Student student
// Example: {"course":{"id":6,"name":"name"},"email":"aldo@itu.dk","firstName":"Alice","id":0,"lastName":"Doe","password":"password","phone":"12345678","photoUrls":["photoUrls","photoUrls"],"status":"enrolled","username":"aldo"}
//
// swagger:model Student
type Student struct {

	// course
	Course *Course `json:"course,omitempty"`

	// email
	// Example: aldo@itu.dk
	Email string `json:"email,omitempty"`

	// first name
	// Example: Alice
	FirstName string `json:"firstName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last name
	// Example: Doe
	LastName string `json:"lastName,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// phone
	// Example: 12345678
	Phone string `json:"phone,omitempty"`

	// photo urls
	PhotoUrls []string `json:"photoUrls" xml:"photoUrl"`

	// student status
	// Enum: [enrolled dropout graduated]
	Status string `json:"status,omitempty"`

	// username
	// Example: aldo
	Username string `json:"username,omitempty"`
}

// Validate validates this student
func (m *Student) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCourse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Student) validateCourse(formats strfmt.Registry) error {
	if swag.IsZero(m.Course) { // not required
		return nil
	}

	if m.Course != nil {
		if err := m.Course.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("course")
			}
			return err
		}
	}

	return nil
}

var studentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enrolled","dropout","graduated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		studentTypeStatusPropEnum = append(studentTypeStatusPropEnum, v)
	}
}

const (

	// StudentStatusEnrolled captures enum value "enrolled"
	StudentStatusEnrolled string = "enrolled"

	// StudentStatusDropout captures enum value "dropout"
	StudentStatusDropout string = "dropout"

	// StudentStatusGraduated captures enum value "graduated"
	StudentStatusGraduated string = "graduated"
)

// prop value enum
func (m *Student) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, studentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Student) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this student based on the context it is used
func (m *Student) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCourse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Student) contextValidateCourse(ctx context.Context, formats strfmt.Registry) error {

	if m.Course != nil {
		if err := m.Course.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("course")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Student) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Student) UnmarshalBinary(b []byte) error {
	var res Student
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
