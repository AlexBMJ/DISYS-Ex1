---
swagger: "2.0"
info:
  description: "ITU REST API"
  version: "1.0.0"
  title: "ITU API"
  license:
    name: "GNU General Public License"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"
host: "localhost"
tags:
- name: "student"
  description: "Management of students at ITU"
- name: "teacher"
  description: "Management of teachers at ITU"
- name: "course"
  description: "Information about courses"
schemes:
- "https"
- "http"
paths:
  /student:
    post:
      tags:
      - "student"
      summary: "Add a new student"
      description: "Student at ITU"
      operationId: "addStudent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student that needs to be added to ITU"
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "405":
          description: "Invalid input"
        "409":
          description: "Already exists"
    put:
      tags:
      - "student"
      summary: "Update a student"
      description: ""
      operationId: "updateStudent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student to be updated"
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid Student ID"
        "404":
          description: "Student not found"
        "405":
          description: "Validation exception"
  /student/findByStatus:
    get:
      tags:
      - "student"
      summary: "Finds student by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findStudentByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "enrolled"
          enum:
          - "enrolled"
          - "dropout"
          - "graduated"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
        "400":
          description: "Invalid status value"
  /student/{studentId}:
    get:
      tags:
      - "student"
      summary: "Find student by ID"
      description: "Returns a single student"
      operationId: "getStudentById"
      produces:
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
    delete:
      tags:
      - "student"
      summary: "Deletes a student"
      description: ""
      operationId: "deleteStudent"
      produces:
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "Id of student to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
  /student/{studentId}/uploadImage:
    post:
      tags:
      - "student"
      summary: "uploads an image"
      description: ""
      operationId: "uploadStudentPhoto"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        x-exportParamName: "AdditionalMetadata"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "successful operation"
  /teacher:
    post:
      tags:
      - "teacher"
      summary: "Add a new teacher"
      description: "Teacher at ITU"
      operationId: "addTeacher"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Teacher that needs to be added to ITU"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "405":
          description: "Invalid input"
        "409":
          description: "Already exists"
    put:
      tags:
      - "teacher"
      summary: "Update a teacher"
      description: ""
      operationId: "updateTeacher"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Teacher to be updated"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid Teacher ID"
        "404":
          description: "Teacher not found"
        "405":
          description: "Validation exception"
  /teacher/findByStatus:
    get:
      tags:
      - "teacher"
      summary: "Finds teacher by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findTeacherByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "teaching"
          enum:
          - "teaching"
          - "on_leave"
          - "retired"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Teacher"
        "400":
          description: "Invalid status value"
  /teacher/{teacherId}:
    get:
      tags:
      - "teacher"
      summary: "Find teacher by ID"
      description: "Returns a single teacher"
      operationId: "getTeacherById"
      produces:
      - "application/json"
      parameters:
      - name: "teacherId"
        in: "path"
        description: "ID of teacher to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeacherId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Teacher"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
    delete:
      tags:
      - "teacher"
      summary: "Deletes a teacher"
      description: ""
      operationId: "deleteTeacher"
      produces:
      - "application/json"
      parameters:
      - name: "teacherId"
        in: "path"
        description: "Id of teacher to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeacherId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
  /teacher/{teacherId}/uploadImage:
    post:
      tags:
      - "teacher"
      summary: "uploads an image"
      description: ""
      operationId: "uploadTeacherPhoto"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "teacherId"
        in: "path"
        description: "ID of teacher to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeacherId"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        x-exportParamName: "AdditionalMetadata"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "successful operation"
  /course:
    post:
      tags:
      - "course"
      summary: "Add a new course"
      description: "Course at ITU"
      operationId: "addCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course that needs to be added to ITU"
        required: true
        schema:
          $ref: "#/definitions/Course"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "405":
          description: "Invalid input"
        "409":
          description: "Already exists"

  /courses:
    get:
      tags:
      - "course"
      summary: "Returns list of courses available"
      description: "Returns a map of status codes to quantities"
      operationId: "getOverview"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
  /course/{courseId}:
    get:
      tags:
      - "course"
      summary: "Find course by ID"
      description: "Returns a single course"
      operationId: "getCourseById"
      produces:
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "ID of course to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Course not found"
    delete:
      tags:
      - "course"
      summary: "Deletes a course"
      description: ""
      operationId: "deleteCourse"
      produces:
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "Id of course to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Course not found"
    put:
      tags:
      - "course"
      summary: "Update a course"
      description: ""
      operationId: "updateCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course to be updated"
        required: true
        schema:
          $ref: "#/definitions/Course"
        x-exportParamName: "Body"
      - name: "courseId"
        in: "path"
        description: "Id of course to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid Course ID"
        "404":
          description: "Course not found"
        "405":
          description: "Validation exception"
definitions:
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Course"
    example:
      name: "name"
      id: 6
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "aldo"
      firstName:
        type: "string"
        example: "Alice"
      lastName:
        type: "string"
        example: "Doe"
      email:
        type: "string"
        example: "aldo@itu.dk"
      password:
        type: "string"
      phone:
        type: "string"
        example: "12345678"
      course:
        $ref: "#/definitions/Course"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "student status"
        enum:
        - "enrolled"
        - "dropout"
        - "graduated"
    xml:
      name: "Student"
    example:
      firstName: "Alice"
      lastName: "Doe"
      password: "password"
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      phone: "12345678"
      course:
        name: "name"
        id: 6
      id: 0
      email: "aldo@itu.dk"
      username: "aldo"
      status: "enrolled"
  Teacher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "jodo"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Doe"
      email:
        type: "string"
        example: "jodo@itu.dk"
      password:
        type: "string"
      phone:
        type: "string"
        example: "98765432"
      courses:
        type: "array"
        items:
          $ref: "#/definitions/Course"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "teacher status"
        enum:
        - "teaching"
        - "on_leave"
        - "retired"
    xml:
      name: "Student"
    example:
      firstName: "John"
      lastName: "Doe"
      courses:
      - name: "name"
        id: 6
      - name: "name"
        id: 6
      password: "password"
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      phone: "98765432"
      id: 0
      email: "jodo@itu.dk"
      username: "jodo"
      status: "teaching"
