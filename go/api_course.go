/*
 * ITU API
 *
 * ITU REST API
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"encoding/json"
	"strconv"
	"github.com/gorilla/mux"
)

func AddCourse(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	var c Course
	err := json.NewDecoder(r.Body).Decode(&c)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if (!DBAddCourse(c)) {
		w.WriteHeader(http.StatusConflict)
		fmt.Fprintf(w, "{\"error\":\"Already exists\"}")
		return
	}
		
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "{\"Course added with id\":%d}", c.Id)
}

func DeleteCourse(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)

    id, err := strconv.ParseInt(vars["courseId"], 10, 64)
    if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, "{\"error\":\"Invalid Course ID\"}")	
		return
    }

	if (!DBDeleteCourse(id)) {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, "{\"error\":\"Course not found\"}")
		return
	}
		
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "{\"Course deleted with id\":%d}", id)
}

func GetCourseById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)

    id, interr := strconv.ParseInt(vars["courseId"], 10, 64)
    if interr != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, "{\"error\":\"Invalid Course ID\"}")	
		return
    }

	c, dberr := DBGetCourse(id)
	if (dberr != nil) {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, "{\"error\":\"Course not found\"}")
		return
	}
		
	
	jsonobj, jsonerr := json.Marshal(c)
	if (jsonerr != nil) {
		w.WriteHeader(http.StatusMethodNotAllowed)
		fmt.Fprintf(w, "{\"error\":%s}", jsonerr)
		return
	}
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, string(jsonobj))
}

func GetOverview(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	jsonobj, jsonerr := json.Marshal(DBGetCourseOverview())
	if (jsonerr != nil) {
		w.WriteHeader(http.StatusMethodNotAllowed)
		fmt.Fprintf(w, "{\"error\":%s}", jsonerr)
		return
	}
	fmt.Fprintf(w, string(jsonobj))
	w.WriteHeader(http.StatusOK)
}

func UpdateCourse(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	id, interr := strconv.ParseInt(vars["courseId"], 10, 64)
    if interr != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, "{\"error\":\"Invalid Course ID\"}")	
		return
    }

	var c Course
	jsonerr := json.NewDecoder(r.Body).Decode(&c)
	if jsonerr != nil {
		http.Error(w, jsonerr.Error(), http.StatusBadRequest)
		return
	}

	dberr := DBUpdateCourse(id, c)
	if (dberr != nil) {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, "{\"error\":\"%s\"}", dberr)
		return
	}

	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "{\"Course updated with id\":%d}", c.Id)
	
}
